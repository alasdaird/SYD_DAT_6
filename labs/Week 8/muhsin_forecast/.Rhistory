#### Get data--------------------------------------------------------------------------------------
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm/raw_data')
#dfSales <- read.csv('HFM_Id_SaleHist.csv', stringsAsFactors = F)
dfSales <- read.csv('Sales_sample.csv', stringsAsFactors = F)
dfHierarchy <- read.csv('HFM_PLU_Hierarchy.csv', header = F, stringsAsFactors = F)
#### Wrangle product hierarchy---------------------------------------------------------------------
### Select fields and rename columns
dfHierarchy <- dfHierarchy %>%
select(
Hierarchy1 = V2,
Hierarchy2 = V5,
Hierarchy3 = V8,
Hierarchy4 = V11,
ProductCode = V13,
ProductName = V14
#ProductName2 = V16 # Inclusion results in duplicate Product Codes
)
## Remove blank ProductCode
dfHierarchy <- dfHierarchy[which(dfHierarchy$ProductCode != ""), ]
## Get unique rows
dfHierarchy <- unique(dfHierarchy)
## Remove duplicates - some have duplicate hierarchies
dfHierarchy <- dfHierarchy[!duplicated(dfHierarchy$ProductCode), ]
#### Wrangle sales---------------------------------------------------------------------------------
# For market basket analysis, only need the 'SequenceNumber' which notes each customer's purchase,
# ProductCode and SaleLineNo to prevent duplicate rows when spreading the key-value pairs.
# Note there are the same number of SequenceNumber as there are SaleDate.
### Select fields and rename columns for key-value pairs
dfSales <- dfSales %>%
select(
ReceiptNumber = Reference2,
SequenceNumber,
MasterNo,
Time_ID,
Hour_ID,
SaleDate,
ProductCode,
Quantity,
ExtendedNetAmount,
ExtendedTaxAmount,
AddDate,
QuantityInSalesUOM,
Store_ID,
SaleLineNo
)
### Remove rows based on exploratory data analysis
# Or, keep everything and exclude as required
##
#df[-which(df$MasterNo == 3000001161), ]
### Format
dfSales$ReceiptNumber <- as.character(dfSales$ReceiptNumber)
dfSales$ProductCode <- as.character(dfSales$ProductCode)
dfSales$Store_ID <- as.character(dfSales$Store_ID)
## Date
dfSales$Time_ID <- as.character(dfSales$Time_ID)
dfSales$Time_ID <- as.Date(dfSales$Time_ID, format = "%Y%m%d")
## POSIXct
dfSales$SaleDate <- as.POSIXct(dfSales$SaleDate)
dfSales$AddDate <- as.POSIXct(dfSales$AddDate)
dfLineItems <- left_join(dfSales, dfHierarchy, by = "ProductCode")
View(dfLineItems)
x <- dfLineItems %>%
group_by(ReceiptNumber, Time_ID) %>%
summarise(Count = n())
View(x)
x$ReceiptNumber
y <- x[duplicated(x$ReceiptNumber), ]
View(y)
y$ReceiptNumber
x$ReceiptNumber
duplicated(x$ReceiptNumber)
x$ReceiptNumber[duplicated(x$ReceiptNumber)]
class(x)
class(y)
x <- as.data.frame(x)
y <- x[duplicated(x$ReceiptNumber), ]
View(y)
options(scipen = 999)
x <- dfLineItems %>%
group_by(ReceiptNumber, Time_ID) %>%
summarise(Count = n())
x <- as.data.frame(x)
y <- x[duplicated(x$ReceiptNumber), ]
View(y)
y$ReceiptNumber
View(dfLineItems)
x <- dfLineItems %>%
group_by(ReceiptNumber, Time_ID) %>%
summarise(Count = n())
x <- as.data.frame(x)
x <- dfLineItems %>%
group_by(ReceiptNumber, Time_ID) %>%
summarise(Count = n())
View(x)
class(dfLineItems$ReceiptNumber)
x <- dfLineItems %>%
group_by(ReceiptNumber, Time_ID) %>%
summarise(Count = n())
View(x)
View(dfLineItems)
View(x)
library(dplyr)
library(tidyr)
#### Get data--------------------------------------------------------------------------------------
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm/raw_data')
#dfSales <- read.csv('HFM_Id_SaleHist.csv', stringsAsFactors = F)
dfSales <- read.csv('Sales_sample.csv', stringsAsFactors = F)
dfHierarchy <- read.csv('HFM_PLU_Hierarchy.csv', header = F, stringsAsFactors = F)
#### Wrangle product hierarchy---------------------------------------------------------------------
### Select fields and rename columns
dfHierarchy <- dfHierarchy %>%
select(
Hierarchy1 = V2,
Hierarchy2 = V5,
Hierarchy3 = V8,
Hierarchy4 = V11,
ProductCode = V13,
ProductName = V14
#ProductName2 = V16 # Inclusion results in duplicate Product Codes
)
## Remove blank ProductCode
dfHierarchy <- dfHierarchy[which(dfHierarchy$ProductCode != ""), ]
## Get unique rows
dfHierarchy <- unique(dfHierarchy)
## Remove duplicates - some have duplicate hierarchies
dfHierarchy <- dfHierarchy[!duplicated(dfHierarchy$ProductCode), ]
dfSales <- dfSales %>%
select(
ReceiptNumber = Reference2,
SequenceNumber,
MasterNo,
Time_ID,
Hour_ID,
SaleDate,
ProductCode,
Quantity,
ExtendedNetAmount,
ExtendedTaxAmount,
AddDate,
QuantityInSalesUOM,
Store_ID,
SaleLineNo
)
View(dfSales)
unique(dfSales$ReceiptNumber)
dfSales$ReceiptNumber <- as.character(dfSales$ReceiptNumber)
dfSales$ProductCode <- as.character(dfSales$ProductCode)
dfSales$Store_ID <- as.character(dfSales$Store_ID)
## Date
dfSales$Time_ID <- as.character(dfSales$Time_ID)
dfSales$Time_ID <- as.Date(dfSales$Time_ID, format = "%Y%m%d")
## POSIXct
dfSales$SaleDate <- as.POSIXct(dfSales$SaleDate)
dfSales$AddDate <- as.POSIXct(dfSales$AddDate)
unique(dfSales$ReceiptNumber)
dfLineItems <- left_join(dfSales, dfHierarchy, by = "ProductCode")
View(dfLineItems)
x <- dfLineItems %>%
group_by(ReceiptNumber, Time_ID) %>%
summarise(Count = n())
View(x)
y <- x[duplicated(x$ReceiptNumber), ]
View(y)
View(dfLineItems)
length(unique(dfLineItems$SequenceNumber))
length(unique(dfLineItems$ReceiptNumber))
View(y)
library(dplyr)
library(tidyr)
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm/raw_data')
#dfSales <- read.csv('HFM_Id_SaleHist.csv', stringsAsFactors = F)
dfSales <- read.csv('Sales_sample.csv', stringsAsFactors = F)
dfHierarchy <- read.csv('HFM_PLU_Hierarchy.csv', header = F, stringsAsFactors = F)
#### Wrangle product hierarchy---------------------------------------------------------------------
### Select fields and rename columns
dfHierarchy <- dfHierarchy %>%
select(
Hierarchy1 = V2,
Hierarchy2 = V5,
Hierarchy3 = V8,
Hierarchy4 = V11,
ProductCode = V13,
ProductName = V14
#ProductName2 = V16 # Inclusion results in duplicate Product Codes
)
## Remove blank ProductCode
dfHierarchy <- dfHierarchy[which(dfHierarchy$ProductCode != ""), ]
## Get unique rows
dfHierarchy <- unique(dfHierarchy)
## Remove duplicates - some have duplicate hierarchies
dfHierarchy <- dfHierarchy[!duplicated(dfHierarchy$ProductCode), ]
#### Wrangle sales---------------------------------------------------------------------------------
# For market basket analysis, only need the 'SequenceNumber' which notes each customer's purchase,
# ProductCode and SaleLineNo to prevent duplicate rows when spreading the key-value pairs.
# Note there are the same number of SequenceNumber as there are SaleDate.
### Select fields and rename columns for key-value pairs
dfSales <- dfSales %>%
select(
#ReceiptNumber = Reference2, # Don't use as ReceiptNumber - SequenceNumber is more granula Reference2 as example 21904000000
SequenceNumber, # MasterNo changes with SequenceNumber
MasterNo,
Time_ID,
Hour_ID,
SaleDate,
ProductCode,
Quantity,
ExtendedNetAmount,
ExtendedTaxAmount,
AddDate,
QuantityInSalesUOM,
Store_ID,
SaleLineNo
)
dfSales$SequenceNumber <- as.character(dfSales$SequenceNumber)
dfSales$ProductCode <- as.character(dfSales$ProductCode)
dfSales$Store_ID <- as.character(dfSales$Store_ID)
## Date
dfSales$Time_ID <- as.character(dfSales$Time_ID)
dfSales$Time_ID <- as.Date(dfSales$Time_ID, format = "%Y%m%d")
## POSIXct
dfSales$SaleDate <- as.POSIXct(dfSales$SaleDate)
dfSales$AddDate <- as.POSIXct(dfSales$AddDate)
dfLineItems <- left_join(dfSales, dfHierarchy, by = "ProductCode")
x <- dfLineItems %>%
group_by(SequenceNumber, Time_ID) %>%
summarise(Count = n())
View(x)
y <- x[duplicated(x$SequenceNumber), ]
View(y)
colnames(dfLineItems)
unique(dfLineItems$Hierarchy1)
View(dfHierarchy)
dfHierarchy <- dfHierarchy %>%
select(
Hierarchy1 = V2,
Hierarchy2 = V5,
Hierarchy3 = V8,
Hierarchy4 = V11,
ProductCode = V13,
ProductName = V14
#ProductName2 = V16 # Inclusion results in duplicate Product Codes
)
## Remove blank ProductCode
dfHierarchy <- dfHierarchy[which(dfHierarchy$ProductCode != ""), ]
## Get unique rows
dfHierarchy <- unique(dfHierarchy)
## Remove duplicates - some have duplicate hierarchies
dfHierarchy <- dfHierarchy[!duplicated(dfHierarchy$ProductCode), ]
#### Wrangle sales---------------------------------------------------------------------------------
# For market basket analysis, only need the 'SequenceNumber' which notes each customer's purchase,
# ProductCode and SaleLineNo to prevent duplicate rows when spreading the key-value pairs.
# Note there are the same number of SequenceNumber as there are SaleDate.
### Select fields and rename columns for key-value pairs
library(dplyr)
library(tidyr)
#### Get data--------------------------------------------------------------------------------------
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm/raw_data')
#dfSales <- read.csv('HFM_Id_SaleHist.csv', stringsAsFactors = F)
dfSales <- read.csv('Sales_sample.csv', stringsAsFactors = F)
dfHierarchy <- read.csv('HFM_PLU_Hierarchy.csv', header = F, stringsAsFactors = F)
#### Wrangle product hierarchy---------------------------------------------------------------------
### Select fields and rename columns
dfHierarchy <- dfHierarchy %>%
select(
Hierarchy1 = V2,
Hierarchy2 = V5,
Hierarchy3 = V8,
Hierarchy4 = V11,
ProductCode = V13,
ProductName = V14
#ProductName2 = V16 # Inclusion results in duplicate Product Codes
)
## Remove blank ProductCode
dfHierarchy <- dfHierarchy[which(dfHierarchy$ProductCode != ""), ]
## Get unique rows
dfHierarchy <- unique(dfHierarchy)
## Remove duplicates - some have duplicate hierarchies
dfHierarchy <- dfHierarchy[!duplicated(dfHierarchy$ProductCode), ]
#### Wrangle sales---------------------------------------------------------------------------------
# For market basket analysis, only need the 'SequenceNumber' which notes each customer's purchase,
# ProductCode and SaleLineNo to prevent duplicate rows when spreading the key-value pairs.
# Note there are the same number of SequenceNumber as there are SaleDate.
### Select fields and rename columns for key-value pairs
dfSales <- dfSales %>%
select(
#ReceiptNumber = Reference2, # Don't use as ReceiptNumber - SequenceNumber is more granula Reference2 as example 21904000000
SequenceNumber, # MasterNo changes with SequenceNumber
MasterNo,
Time_ID,
Hour_ID,
SaleDate,
ProductCode,
Quantity,
ExtendedNetAmount,
#ExtendedTaxAmount, # Focus on ExtendedNetAmount
AddDate,
QuantityInSalesUOM,
Store_ID,
SaleLineNo
)
### Remove rows based on exploratory data analysis
# Or, keep everything and exclude as required
##
#df[-which(df$MasterNo == 3000001161), ]
### Format
## Character
dfSales$SequenceNumber <- as.character(dfSales$SequenceNumber)
dfSales$ProductCode <- as.character(dfSales$ProductCode)
dfSales$Store_ID <- as.character(dfSales$Store_ID)
## Date
dfSales$Time_ID <- as.character(dfSales$Time_ID)
dfSales$Time_ID <- as.Date(dfSales$Time_ID, format = "%Y%m%d")
## POSIXct
dfSales$SaleDate <- as.POSIXct(dfSales$SaleDate)
dfSales$AddDate <- as.POSIXct(dfSales$AddDate)
#### Create line item data frame-------------------------------------------------------------------
## Merge sales and hierarchy by ProductCode
dfLineItems <- left_join(dfSales, dfHierarchy, by = "ProductCode")
View(dfLineItems)
dfSpend <- dfLineItems %>%
group_by(SequenceNumber,
Time_ID,
Hour_ID) %>%
summarise(Spend = sum(ExtendedNetAmount))
View(dfSpend)
hist(dfSpend$Spend)
write.csv(dfLineItems, file = "Line Items.csv")
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm')
write.csv(dfLineItems, file = "Line Items.csv")
# Load libraries-----------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
#### Get data--------------------------------------------------------------------------------------
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm/raw_data')
dfSales <- read.csv('HFM_Id_SaleHist.csv', stringsAsFactors = F)
dfHierarchy <- read.csv('HFM_PLU_Hierarchy.csv', header = F, stringsAsFactors = F)
#### Wrangle product hierarchy---------------------------------------------------------------------
### Select fields and rename columns
dfHierarchy <- dfHierarchy %>%
select(
Hierarchy1 = V2,
Hierarchy2 = V5,
Hierarchy3 = V8,
Hierarchy4 = V11,
ProductCode = V13,
ProductName = V14
#ProductName2 = V16 # Inclusion results in duplicate Product Codes
)
## Remove blank ProductCode
dfHierarchy <- dfHierarchy[which(dfHierarchy$ProductCode != ""), ]
## Get unique rows
dfHierarchy <- unique(dfHierarchy)
## Remove duplicates - some have duplicate hierarchies
dfHierarchy <- dfHierarchy[!duplicated(dfHierarchy$ProductCode), ]
#### Wrangle sales---------------------------------------------------------------------------------
# For market basket analysis, only need the 'SequenceNumber' which notes each customer's purchase,
# ProductCode and SaleLineNo to prevent duplicate rows when spreading the key-value pairs.
# Note there are the same number of SequenceNumber as there are SaleDate.
### Select fields and rename columns for key-value pairs
dfSales <- dfSales %>%
select(
#ReceiptNumber = Reference2, # Don't use as ReceiptNumber - SequenceNumber is more granula Reference2 as example 21904000000
SequenceNumber, # MasterNo changes with SequenceNumber
MasterNo,
Time_ID,
Hour_ID,
SaleDate,
ProductCode,
Quantity,
ExtendedNetAmount,
#ExtendedTaxAmount, # Focus on ExtendedNetAmount
AddDate,
QuantityInSalesUOM,
Store_ID,
SaleLineNo
)
### Remove rows based on exploratory data analysis
# Or, keep everything and exclude as required
##
#df[-which(df$MasterNo == 3000001161), ]
### Format
## Character
dfSales$SequenceNumber <- as.character(dfSales$SequenceNumber)
dfSales$ProductCode <- as.character(dfSales$ProductCode)
dfSales$Store_ID <- as.character(dfSales$Store_ID)
## Date
dfSales$Time_ID <- as.character(dfSales$Time_ID)
dfSales$Time_ID <- as.Date(dfSales$Time_ID, format = "%Y%m%d")
## POSIXct
dfSales$SaleDate <- as.POSIXct(dfSales$SaleDate)
dfSales$AddDate <- as.POSIXct(dfSales$AddDate)
#### Create line item data frame-------------------------------------------------------------------
## Merge sales and hierarchy by ProductCode
dfLineItems <- left_join(dfSales, dfHierarchy, by = "ProductCode")
## Save to visualise in Power BI
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm')
write.csv(dfLineItems, file = "Line Items.csv")
View(dfLineItems)
### Price
## Group to get the spend per sale
dfSpend <- dfLineItems %>%
group_by(SequenceNumber,
Time_ID,
Hour_ID) %>%
summarise(Spend = sum(ExtendedNetAmount))
library(dplyr)
library(tidyr)
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm/')
df <- read.csv('Line Items.csv', stringsAsFactors = F)
rm(dfHierarchy, dfLineItems, dfSales, dfSpend)
dfLineItems <- df
rm(df)
View(dfLineItems)
df <- dfLineItems %>%
select(
SequenceNumber,
ProductName
)
df <- unique(df)
df$ProductName <- as.character(df$ProductName)
View(df)
sum(df$ProductName == "")
write.csv(df, file = "my_single.csv", row.names = F)
trans <- read.transactions("my_single.csv", format = "single", sep = ",", cols = c("SequenceNumber", "Product"))
trans <- read.transactions("my_single.csv", format = "single", sep = ",", cols = c("SequenceNumber", "ProductName"))
trans2 <- read.transactions("my_single.csv", format = "single", sep = ",")
inspect(trans)
library(arules)
library(arulesViz)
install.packages(arulesViz)
install.packages('arulesViz')
library(arulesViz)
install.packages("quantmod")
library(arules)
library(arulesViz)
itemFrequencyPlot(trans,topN=20,type="absolute")
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.8))
options(digits = 2)
inspect(rules[1:5])
rules[1]
rules[1:1]
class(rules)
inspect(rules[1:2])
data(Groceries)
itemFrequencyPlot(Groceries, topN = 20, type = "absolute")
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8))
options(digits = 2)
inspect(rules[1:2])
itemFrequencyPlot(trans, topN = 20, type = "absolute")
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.8))
options(digits = 2)
inspect(rules[1:2])
rules
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.8))
data(Groceries)
itemFrequencyPlot(Groceries, topN = 20, type = "absolute")
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8))
library(dplyr)
library(tidyr)
#### Get data--------------------------------------------------------------------------------------
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm/')
df <- read.csv('Line Items.csv', row.names = F, stringsAsFactors = F)
library(dplyr)
library(tidyr)
setwd('/Users/muhsinkarim/R/Projects/general_assembly/harris_farm/')
df <- read.csv('Line Items.csv', row.names = F, stringsAsFactors = F)
?read.csv
df <- read.csv('Line Items.csv', stringsAsFactors = F)
df <- dfLineItems %>%
select(
SequenceNumber,
ProductName
)
dfLineItems <- df
df <- dfLineItems %>%
select(
SequenceNumber,
ProductName
)
write.csv(df, file = "my_single.csv", row.names = F)
trans <- read.transactions("my_single.csv", format = "single", sep = ",", cols = c("SequenceNumber", "ProductName"))
itemFrequencyPlot(trans, topN = 20, type = "absolute")
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.8))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.01))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.1))
options(digits = 2)
inspect(rules[1:5])
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.01))
options(digits = 2)
inspect(rules[1:5])
rules <- apriori(Groceries, parameter = list(supp = 0.001, conf = 0.8, minlen=2))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.01, minlen=2))
options(digits = 2)
inspect(rules[1:5])
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.02, minlen=2))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.1, minlen = 2))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.8, minlen = 2))
options(digits = 2)
inspect(rules[1:5])
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.2, minlen = 2))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.3, minlen = 2))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.4, minlen = 2))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.6, minlen = 2))
rules <- apriori(trans, parameter = list(supp = 0.001, conf = 0.5, minlen = 2))
options(digits = 2)
inspect(rules[1:5])
rules <- apriori(trans, parameter = list(supp = 0.01, conf = 0.5, minlen = 2))
rules <- apriori(trans, parameter = list(supp = 0.01, conf = 0.05, minlen = 2))
rules <- apriori(trans, parameter = list(supp = 0.01, conf = 0.1, minlen = 2))
options(digits = 2)
inspect(rules[1:5])
