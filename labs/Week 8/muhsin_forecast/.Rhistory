install.packages("fpp")
install.packages("ggplot2")
library(ggplot2)
library(forecast)
library(fpp) # get a dataset to work with from 'fpp' - datasets from forecasting principles and practice
plot(elecequip)
head(elecequip)
class(elecequip)  # ts class
elecequip
View(elecequip)
fit <- stl(elecequip, s.window=5)  #seasonal decomposition
plot(fit) # show the components
autoplot(fit)  # plot with ggplot2
plot(fit) # show the components
autoplot(fit)  # plot with ggplot2
plot(elecequip, col='gray',
main="Electrical Equipment Manyfacturing",
ylab='New orders index', xlab="")
lines(fit$time.series[,2], col="red", ylab="Trend")
fit$time.series
head(fit$time.series)
fit1 <- ses(oil, alpha=0.2, initial="simple", h=3) # alpha=smppthing parameter  h=periods
fit2 <- ses(oil, alpha=0.6, initial="simple", h=3)
fit3 <- ses(oil,  h=3)
fit4 <- ses(oil, alpha=0.6, initial="simple", h=1)
# Plot the model fit (training data)
plot(fit1, plot.conf=FALSE, ylab="Oil (millions of tonnes)",
xlab="Year", main="", fcol="white", type="o")
lines(fitted(fit1), col="blue", type="o")
lines(fitted(fit2), col="red", type="o")
lines(fitted(fit3), col="green", type="o")
lines(fitted(fit4), col="yellow", type="o")
# PLot the forecast
plot(fit1, plot.conf=FALSE, ylab="Oil (millions of tonnes)",
xlab="Year", main="", fcol="white", type="o")
lines(fit1$mean, col="blue", type="o")
lines(fit2$mean, col="red", type="o")
lines(fit3$mean, col="green", type="o")
plot(oil)
fit4 <- ses(oil, alpha=0.6, initial="simple", h=1)
plot(fit1, plot.conf=FALSE, ylab="Oil (millions of tonnes)",
xlab="Year", main="", fcol="white", type="o")
lines(fitted(fit4), col="yellow", type="o")
# Exponential smoothing model - with different Alpha smoothing and H perio parameter settings
fit1 <- ses(oil, alpha=0.2, initial="simple", h=3) # alpha=smppthing parameter  h=periods
fit2 <- ses(oil, alpha=0.6, initial="simple", h=3)
fit3 <- ses(oil,  h=3)
fit4 <- ses(oil, alpha=0.6, initial="simple", h=1)
# Plot the model fit (training data)
plot(fit1, plot.conf=FALSE, ylab="Oil (millions of tonnes)",
xlab="Year", main="", fcol="white", type="o")
lines(fitted(fit1), col="blue", type="o")
lines(fitted(fit2), col="red", type="o")
lines(fitted(fit3), col="green", type="o")
lines(fitted(fit4), col="yellow", type="o")
plot(fit1, plot.conf=FALSE, ylab="Oil (millions of tonnes)",
xlab="Year", main="", fcol="white", type="o")
lines(fit1$mean, col="blue", type="o")
lines(fit2$mean, col="red", type="o")
lines(fit3$mean, col="green", type="o")
aust <- window(austourists, start=2005)
plot(aust)
fit1 <- hw(aust, seasonal="additive")
fit2 <- hw(aust, seasonal="multiplicative")
plot(fit2, ylab="International visitnor night in Australia (millions)",
plot.conf=FALSE, type="o", fcol="white", xlab="Year")
lines(fitted(fit1), col="red", lty=2)
lines(fitted(fit2), col="green", lty=2)
lines(fit1$mean, type="o", col="red")
lines(fit2$mean, type="o", col="green")
plot(oil)
fit1 <- ses(oil, alpha=0.2, initial="simple", h=3) # alpha=smppthing parameter  h=periods
plot(fit1, plot.conf=FALSE, ylab="Oil (millions of tonnes)",
xlab="Year", main="", fcol="white", type="o")
lines(fitted(fit1), col="blue", type="o")
plot(fit1, plot.conf=FALSE, ylab="Oil (millions of tonnes)",
xlab="Year", main="", fcol="white", type="o")
lines(fit1$mean, col="blue", type="o")
?a10
plot(a10)
plot(log(a10))  # variance (as well as the scale) reduces for the log values
plot(stl(a10, s.window=12))
plot(diff(log(a10), s.window=12))
plot(a10)
plot(log(a10))  # variance (as well as the scale) reduces for the log values
plot(stl(a10, s.window=12))
plot(stl(log(a10), s.window = 12))
plot(diff(log(a10), s.window=12))
tsdisplay(diff(WWWusage), main="")
fit <- Arima(WWWusage, order=c(3,1,1))
summary(fit)
# now using auto method for selecting order
fit1 <- auto.arima(WWWusage)
plot(forecast(fit1))
summary(fit1)
fit2 <- auto.arima(a10)
plot(forecast(fit2))
summary(fit2)
fit2 <- auto.arima(a10)
tsdisplay(diff(WWWusage), main="")
fit <- Arima(WWWusage, order=c(3,1,1))
summary(fit)
plot(forecast(fit))
fit1 <- auto.arima(WWWusage)
plot(forecast(fit1))
summary(fit1)
fit2 <- auto.arima(a10)
plot(forecast(fit2))
forecast(fit2)
forecast(fit2)[1]
forecast(fit2)[2]
forecast(fit2)[3]
forecast(fit2)[4]
forecast(fit2)
x <- forecast(fit2)
summary(fit2)
x$xname
x$Forecast
summary(fit2)
class(x)
x$lower
x
x$lower/x$upper
mean(x$lower, x$upper)
x$fitted
x$mean
x
x$mean
beer2 <- window(ausbeer, start=1992, end=2006-.1)
beer2
beerfit1 <- meanf(beer2, h=11)
beerfit1
beerfit1 <- meanf(beer2, h=1)
beerfit1
beerfit1 <- meanf(beer2, h=11)
beerfit2 <- rwf(beer2, h=11)
beerfit3 <- snaive(beer2, h=11)
beerfit4 <- auto.arima(beer2)
plot(beerfit1, plot.conf=FALSE,
main="forecasts for quaterly beer production")
lines(beerfit2$mean, col="red")
lines(beerfit3$mean, col="green")
plot(forecast(beerfit4), col="grey")
lines(ausbeer)
#### Query POS data
# Never clear the workspace
## Increase java heap space before loading libraries
#options(java.parameters = "-Xmx1000m")
options( java.parameters = "-Xmx4g" )
library(RJDBC)
library(dplyr)
library(tidyr)
## Load the DB2 JDBC driver:
jcc = JDBC("com.ibm.db2.jcc.DB2Driver", "/Users/muhsinkarim/Documents/db_drivers/db2jcc4.jar")
## Establish a database connection to delivered sales
conn = dbConnect(jcc,
"jdbc:db2://AUFLDW01:60012/DWHTST00",              # "jdbc:db2://hostname:port/DBNAME"
user = "SAPDM",
password = "R3l0ad")
rs = dbSendQuery(conn, "CALL DEV.GET_SIGNAL_V01('ACT','20150101','20151231')")
## Run query and get query time
startTime <- Sys.time()
df = fetch(rs, -1)
endTime <- Sys.time()
fetchTime <- endTime - startTime
print(fetchTime)
View(df)
dfACT <- df
setwd("/Users/muhsinkarim/R/RawData/Pos")
setwd("/Users/muhsinkarim/R/RawData/Pos")
save(dfACT, file = "dfPos2015_ACT.Rdata")
## Load the DB2 JDBC driver:
jcc = JDBC("com.ibm.db2.jcc.DB2Driver", "/Users/muhsinkarim/Documents/db_drivers/db2jcc4.jar")
## Establish a database connection to delivered sales
conn = dbConnect(jcc,
"jdbc:db2://AUFLDW01:60012/DWHTST00",              # "jdbc:db2://hostname:port/DBNAME"
user = "SAPDM",
password = "R3l0ad")
## Update arguements
rs = dbSendQuery(conn, "CALL DEV.GET_SIGNAL_V01('NSW','20150101','20151231')")
## Run query and get query time
startTime <- Sys.time()
df = fetch(rs, -1)
endTime <- Sys.time()
fetchTime <- endTime - startTime
print(fetchTime)
dfNSW <- df
setwd("/Users/muhsinkarim/R/RawData/Pos")
save(dfNSW, file = "dfPos2015_NSW.Rdata")
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(genderizeR))
setwd('/Users/muhsinkarim/R/RawData/Pos/3rd refresh')
load("dfPos2015_NSW.Rdata")
load("dfPos2015_ACT.Rdata")
df <- rbind.data.frame(dfNSW, dfACT)
rm(dfACT, dfNSW)
setwd('/Users/muhsinkarim/R/Projects/gender_instore')
load("genderize_cached.Rdata")
firstNameItem <- unique(df$CUST_FIRST_NM)
firstNameItem <- gsub("^\\s+|\\s+$", "", firstNameItem) # Remove whitespace
firstNameItem <-  gsub(" .*$", "", firstNameItem) # First item
firstNameItem <-  gsub("-.*$", "", firstNameItem) # Remove from hyphen onwards
firstNameItem <-  gsub("/.*$", "", firstNameItem) # Remove second name after /
firstNameItem <-  gsub("[[:punct:]]", "", firstNameItem) # Remove punctuation
firstNameItem <- tolower(firstNameItem)
firstNameItem
newNames <- unique(firstNameItem)
newNames <- newNames[!is.na(newNames)] # Remove NA
newNames <- tolower(newNames)
newNames <- sort(newNames)
newNames <- setdiff(newNames, namesNotFound)
existingNames <- unique(genderize_cached$name)
newNames <- unique(setdiff(newNames, existingNames))
newNames <- newNames[1:1000]
### Load libraries
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(genderizeR))
### Load data
## Get POS
setwd('/Users/muhsinkarim/R/RawData/Pos/3rd refresh')
## 2015 and 2016 data per State
load("dfPos2015_NSW.Rdata")
load("dfPos2015_ACT.Rdata")
df <- rbind.data.frame(dfNSW, dfACT)
setwd('/Users/muhsinkarim/R/Projects/gender_instore')
load("genderize_cached.Rdata")
## Get customer first name item
firstNameItem <- unique(df$CUST_FIRST_NM)
firstNameItem <- gsub("^\\s+|\\s+$", "", firstNameItem) # Remove whitespace
firstNameItem <-  gsub(" .*$", "", firstNameItem) # First item
firstNameItem <-  gsub("-.*$", "", firstNameItem) # Remove from hyphen onwards
firstNameItem <-  gsub("/.*$", "", firstNameItem) # Remove second name after /
firstNameItem <-  gsub("[[:punct:]]", "", firstNameItem) # Remove punctuation
firstNameItem <- tolower(firstNameItem)
newNames <- unique(firstNameItem)
newNames <- newNames[!is.na(newNames)] # Remove NA
newNames <- tolower(newNames)
newNames <- sort(newNames)
newNames <- setdiff(newNames, namesNotFound)
existingNames <- unique(genderize_cached$name)
newNames <- unique(setdiff(newNames, existingNames))
newNames1 <- newNames[1:1000]
newNames1
newNames <- newNames[1:1000]
rm(newNames1)
newNames <- newNames[1:100]
(length(newNames) != 0)
genderDB = findGivenNames(newNames, progress = FALSE, apikey = '2ad9a67b0abb5ae91017da4e1f68786d')
install.packages('RJDBC')
library(RJDBC)
drv <- JDBC("com.microsoft.sqlserver.jdbc.SQLServerDriver" ,
"/Users/muhsinkarim/Documents/db_drivers/sqljdbc_6.0/enu/sqljdbc42.jar", identifier.quote="`")
